{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","length","push","payload","removeTodo","filter","item","id","setCheck","map","done","_todoSlice$actions","actions","selectTodoList","todos","Input","_useState","useState","_useState2","_slicedToArray","input","setInput","dispatch","useDispatch","_jsx","className","children","type","placeholder","onChange","e","target","value","onKeyPress","key","preventDefault","Date","now","maxlength","TodoItem","_ref","_jsxs","Checkbox","checked","style","color","inputProps","onClick","App","useSelector","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","Provider","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAOMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aANiB,CACjBC,SAAU,IAMVC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACXD,EAAMH,SAASK,OAAS,IAC3BF,EAAMH,SAASM,KAAKF,EAAOG,UAG/BC,WAAY,SAACL,EAAOC,GAChBD,EAAMH,SAAWG,EAAMH,SAASS,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOP,EAAOG,YAGtEK,SAAU,SAACT,EAAOC,GACdD,EAAMH,SAASa,KAAI,SAAAH,GACZN,EAAOG,UAAYG,EAAKC,MACN,IAAdD,EAAKI,KACJJ,EAAKI,MAAO,EAEZJ,EAAKI,MAAO,UAMjCC,EAEyDnB,EAAUoB,QAAvDd,EAAQa,EAARb,SAAUU,EAAQG,EAARH,SAAUJ,EAAUO,EAAVP,WAEtBS,GAF0CF,EAARf,SAEjB,SAAAG,GAAK,OAAIA,EAAMe,MAAMlB,WAEpCJ,IAAiB,Q,OCKjBuB,EAnCD,WAAO,IAADC,EAEUC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAEhBI,EAAWC,cAgBjB,OACIC,cAAA,OAAKC,UAAU,QAAOC,SAClBF,cAAA,SACIG,KAAK,OACLC,YAAY,wBACZC,SAAU,SAAAC,GAAC,OAAET,EAASS,EAAEC,OAAOC,QAC/BC,WApBI,SAAAH,GACE,KAAVV,GAA0B,UAAVU,EAAEI,MAClBJ,EAAEK,iBAEFb,EAASxB,EAAS,CACdQ,KAAMc,EACNV,MAAM,EACNH,GAAI6B,KAAKC,SAGbhB,EAAS,MAWLW,MAAOZ,EACPK,UAAU,QACVa,UAAU,U,gBCKXC,EAnCE,SAAHC,GAA0B,IAArB9C,EAAI8C,EAAJ9C,KAAMgB,EAAI8B,EAAJ9B,KAAMH,EAAEiC,EAAFjC,GAErBe,EAAWC,cAUjB,OACIkB,eAAA,OAAKhB,UAAU,WAAUC,SAAA,CAErBF,cAACkB,IAAQ,CACLC,QAASjC,EACTkC,MAAQ,CACJC,MAAO,WAEXhB,SAhBQ,WAChBP,EAASd,EAASD,KAgBVuC,WAAY,CAAE,aAAa,wBAE/BtB,cAAA,OAAKC,UAAU,cAAaC,SACxBe,eAAA,KAAGhB,UAAWf,GAAQ,iBAAiBgB,SAAA,CAAC,IAAGhC,EAAM,SAIrD8B,cAAA,OAAKC,UAAU,OAAMC,SACjBF,cAAA,UAAQC,UAAU,SAASsB,QArBlB,WACjBzB,EAASlB,EAAWG,KAoBqCmB,SAAC,cCEnDsB,MA9Bf,WAEE,IAAMpD,EAAWqD,YAAYpC,GAE7B,OACE4B,eAAA,OAAKhB,UAAU,MAAKC,SAAA,CAClBF,cAAA,MAAAE,SAAI,gBACJe,eAAA,OAAKhB,UAAU,gBAAeC,SAAA,CAC5BF,cAAA,OAAKC,UAAU,oBAAmBC,SAEhC9B,EAASa,KAAI,SAAAH,GAAI,OACfkB,cAACe,EAAQ,CACP7C,KAAMY,EAAKA,KACXI,KAAMJ,EAAKI,KACXH,GAAID,EAAKC,IACJD,EAAKC,SAMdiB,cAACT,EAAK,OAIVS,cAAA,OAAKC,UAAU,MAAKC,SAAC,YC9BZwB,cAAe,CAC5BC,QAAS,CACPrC,MAAOsC,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPnC,cAACoC,IAAMC,WAAU,CAAAnC,SACfF,cAACsC,IAAQ,CAACC,MAAOA,EAAMrC,SACrBF,cAACwB,EAAG,QAGRgB,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21d64519.chunk.js","sourcesContent":["//Snippet: rxslice\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo: (state, action) => {\r\n            if(state.todoList.length < 12) {\r\n            state.todoList.push(action.payload)\r\n        }}, \r\n        \r\n        removeTodo: (state, action) => {\r\n            state.todoList = state.todoList.filter(item => item.id !== action.payload)\r\n        },\r\n        \r\n        setCheck: (state, action) => {\r\n            state.todoList.map(item => {\r\n                if(action.payload === item.id) {\r\n                    if(item.done === true) {\r\n                        item.done = false\r\n                    } else {\r\n                        item.done = true\r\n                    }\r\n                } \r\n            })\r\n        },\r\n    }\r\n});\r\n\r\nexport const { saveTodo, setCheck, removeTodo, todoList } = todoSlice.actions;\r\n\r\nexport const selectTodoList = state => state.todos.todoList;\r\n\r\nexport default todoSlice.reducer;","import React, { useState } from 'react'\r\nimport './Input.css';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveTodo } from '../features/todoSlice';\r\n\r\n// import { todoList } from '../features/todoSlice';\r\n\r\nconst Input = () => {\r\n\r\n    const [input, setInput] = useState('')\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const addTodo = e => {\r\n        if (input !== '' && e.key === 'Enter') {\r\n            e.preventDefault();\r\n            \r\n            dispatch(saveTodo({\r\n                item: input,\r\n                done: false,\r\n                id: Date.now(),\r\n            }));\r\n            \r\n            setInput('');            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='Input'>\r\n            <input \r\n                type='text' \r\n                placeholder='write and press enter'\r\n                onChange={e=>setInput(e.target.value)} \r\n                onKeyPress={addTodo}\r\n                value={input}\r\n                className='input'\r\n                maxlength='40'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport './TodoItem.css';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCheck, removeTodo } from '../features/todoSlice'\r\n\r\nconst TodoItem = ({name, done, id}) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCheck = () => {\r\n        dispatch(setCheck(id))\r\n    };\r\n\r\n    const handleRemove = () => {\r\n        dispatch(removeTodo(id))\r\n    };\r\n\r\n    return (\r\n        <div className='todoItem'>\r\n\r\n            <Checkbox\r\n                checked={done}\r\n                style ={{\r\n                    color: \"#007db2\",\r\n                  }}\r\n                onChange={handleCheck}\r\n                inputProps={{ 'aria-label':'secondary checkbox' }}\r\n            />\r\n            <div className='description'>\r\n                <p className={done && 'todoItem--done'}> { name } </p>\r\n            </div>\r\n\r\n\r\n            <div className='butt'>\r\n                <button className='delete' onClick={handleRemove}> X </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport Input from './components/Input';\r\nimport TodoItem from './components/TodoItem';\r\n\r\nimport { selectTodoList } from './features/todoSlice';\r\n\r\nfunction App() {\r\n\r\n  const todoList = useSelector(selectTodoList);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1> dailytask </h1>\r\n      <div className='app_container'>\r\n        <div className='app_todoContainer'>  \r\n        {\r\n          todoList.map(item => (\r\n            <TodoItem \r\n              name={item.item} \r\n              done={item.done} \r\n              id={item.id} \r\n              key={item.id}\r\n            />\r\n          ))\r\n        }\r\n        </div>    \r\n\r\n          <Input />\r\n\r\n      </div>\r\n\r\n      <div className='koa'>KOA</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from '../features/todoSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}